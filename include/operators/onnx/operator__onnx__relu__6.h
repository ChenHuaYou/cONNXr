
//this file was generated by ../../scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__ONNX__RELU__6_H
# define OPERATOR_OPERATOR__ONNX__RELU__6_H

# include "operators/operator.h"
# include "operators/operator_stub.h"

typedef struct operator_context_input__operator__onnx__relu__6 {
    size_t length;
    operator_tensor *X;
} operator_context_input_operator__onnx__relu__6;

typedef struct operator_context_output__operator__onnx__relu__6 {
    size_t length;
    operator_tensor *Y;
} operator_context_output_operator__onnx__relu__6;

typedef struct operator_context_attribute__operator__onnx__relu__6 {
    size_t length;
    
} operator_context_attribute_operator__onnx__relu__6;

typedef struct operator_context__operator__onnx__relu__6 {
    struct operator_context_input__operator__onnx__relu__6     *input;
    struct operator_context_output__operator__onnx__relu__6    *output;
    struct operator_context_attribute__operator__onnx__relu__6 *attribute;
    operator_executer                          operator;
} operator_context__operator__onnx__relu__6;

/**
 * onnx operator 'Relu' version 6
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Relu takes one input data (Tensor<T>) and produces one output data
 * (Tensor<T>) where the rectified linear function, y = max(0, x), is applied
 * to the tensor elementwise.
 * 
 * Constraint T:
 *   Constrain input and output types to float tensors.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Input T X:
 *   Input tensor
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Output T Y:
 *   Output tensor
 *   Allowed Types: tensor_double, tensor_float, tensor_float16

 *
 * @since version 6
 *
 * @see ../../../../../../travis/build/onnx/wheel-builder/onnx/onnx/defs/math/defs.cc:309
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Relu
 */
operator_status operator__onnx__relu__6(
    operator_context__operator__onnx__relu__6 *ctx
);

operator_executer resolve_operator__onnx__relu__6(
    operator_context__operator__onnx__relu__6 *ctx
);

extern __attribute__((weak))
operator_status operator__onnx__relu__6__T_tensor_double(
    operator_context__operator__onnx__relu__6 *ctx
);
extern __attribute__((weak))
operator_status operator__onnx__relu__6__T_tensor_float(
    operator_context__operator__onnx__relu__6 *ctx
);
extern __attribute__((weak))
operator_status operator__onnx__relu__6__T_tensor_float16(
    operator_context__operator__onnx__relu__6 *ctx
);
# endif
