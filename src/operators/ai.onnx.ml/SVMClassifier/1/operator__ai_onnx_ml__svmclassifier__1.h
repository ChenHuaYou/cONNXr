//this file was generated by ../../../../../../scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX_ML__SVMCLASSIFIER__1_H
# define OPERATOR_OPERATOR__AI_ONNX_ML__SVMCLASSIFIER__1_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx.ml operator 'SVMClassifier' version 1
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Support Vector Machine classifier
 * 
 * Constraint T1:
 *   The input must be a tensor of a numeric type, either [C] or [N,C].
 *   Allowed Types: tensor_double, tensor_float, tensor_int32, tensor_int64
 * 
 * Constraint T2:
 *   The output type will be a tensor of strings or integers, depending on
 *   which of the the classlabels_* attributes is used. Its size will match the
 *   bactch size of the input.
 *   Allowed Types: tensor_int64, tensor_string
 * Input T1 X:
 *   Data to be classified.
 *   Allowed Types: tensor_double, tensor_float, tensor_int32, tensor_int64
 * Output T2 Y:
 *   Classification outputs (one class per example).
 *   Allowed Types: tensor_int64, tensor_string
 * 
 * Output tensor(float) Z:
 *   Class scores (one per class per example), if prob_a and prob_b are
 *   provided they are probabilities for each class, otherwise they are raw
 *   scores.
 *   Allowed Types: tensor_float
 * Attribute INTS classlabels_ints (optional):
 *   Class labels if using integer labels.<br>One and only one of the
 *   'classlabels_*' attributes must be defined.
 * 
 * Attribute STRINGS classlabels_strings (optional):
 *   Class labels if using string labels.<br>One and only one of the
 *   'classlabels_*' attributes must be defined.
 * 
 * Attribute FLOATS coefficients (optional):
 *   
 * 
 * Attribute FLOATS kernel_params (optional):
 *   List of 3 elements containing gamma, coef0, and degree, in that order.
 *   Zero if unused for the kernel.
 * 
 * Attribute STRING kernel_type (optional):
 *   The kernel type, one of 'LINEAR,' 'POLY,' 'RBF,' 'SIGMOID'.
 * 
 * Attribute STRING post_transform (optional):
 *   Indicates the transform to apply to the score. <br>One of 'NONE,'
 *   'SOFTMAX,' 'LOGISTIC,' 'SOFTMAX_ZERO,' or 'PROBIT'
 * 
 * Attribute FLOATS prob_a (optional):
 *   First set of probability coefficients.
 * 
 * Attribute FLOATS prob_b (optional):
 *   Second set of probability coefficients. This array must be same size as
 *   prob_a.<br>If these are provided then output Z are probability estimates,
 *   otherwise they are raw scores.
 * 
 * Attribute FLOATS rho (optional):
 *   
 * 
 * Attribute FLOATS support_vectors (optional):
 *   
 * 
 * Attribute INTS vectors_per_class (optional):
 *   
 *
 * @since version 1
 *
 * @see io/onnx/onnx/defs/traditionalml/defs.cc:811
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators-ml.md#SVMClassifier
 */

operator_status
prepare_operator__ai_onnx_ml__svmclassifier__1(
    node_context *ctx
);

extern operator_info info_operator__ai_onnx_ml__svmclassifier__1;

typedef struct {
    size_t n_classlabels_ints;
    int64_t* classlabels_ints;
    size_t n_classlabels_strings;
    char** classlabels_strings;
    size_t n_coefficients;
    float* coefficients;
    size_t n_kernel_params;
    float* kernel_params;
    char* kernel_type;
    char* post_transform;
    size_t n_prob_a;
    float* prob_a;
    size_t n_prob_b;
    float* prob_b;
    size_t n_rho;
    float* rho;
    size_t n_support_vectors;
    float* support_vectors;
    size_t n_vectors_per_class;
    int64_t* vectors_per_class;

} context_operator__ai_onnx_ml__svmclassifier__1;

operator_executer
resolve_operator__ai_onnx_ml__svmclassifier__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__svmclassifier__1(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__svmclassifier__1__T1_tensor_double(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__svmclassifier__1__T1_tensor_float(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__svmclassifier__1__T1_tensor_int32(
    node_context *ctx
);

operator_status
execute_operator__ai_onnx_ml__svmclassifier__1__T1_tensor_int64(
    node_context *ctx
);

# endif