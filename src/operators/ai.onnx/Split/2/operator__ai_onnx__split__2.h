//this file was generated by ../../../../../../scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__SPLIT__2_H
# define OPERATOR_OPERATOR__AI_ONNX__SPLIT__2_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Split' version 2
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Split a tensor into a list of tensors, along the specified
 * 'axis'. Lengths of the parts can be specified using argument 'split'.
 * Otherwise, the tensor is split to equal sized parts.
 * 
 * Constraint T:
 *   Constrain input and output types to all tensor types.
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Input T input:
 *   The tensor to split
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Output T outputs:
 *   One or more outputs forming list of tensors after splitting
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * Attribute INT axis (optional):
 *   Which axis to split on.
 * 
 * Attribute INTS split (optional):
 *   length of each output
*
* @since version 2
*
 * @see io/onnx/onnx/defs/tensor/old.cc:1549
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Split
*/

operator_status
prepare_operator__ai_onnx__split__2(
    Onnx__NodeProto *ctx
);

extern operator_info info_operator__ai_onnx__split__2;

typedef struct {
    int64_t axis;
    size_t n_split;
    int64_t* split;

} context_operator__ai_onnx__split__2;

operator_status
execute_operator__ai_onnx__split__2(
    Onnx__NodeProto *ctx
);

# endif