//this file was generated by ../../../../../../scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__SEQUENCEINSERT__11_H
# define OPERATOR_OPERATOR__AI_ONNX__SEQUENCEINSERT__11_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'SequenceInsert' version 11
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Outputs a tensor sequence that inserts 'tensor' into 'input_sequence' at 'position'.
 * 'tensor' must have the same data type as 'input_sequence'.
 * Accepted range for 'position' is in `[-n, n]`, where `n` is the number of tensors in 'input_sequence'.
 * Negative value means counting positions from the back.
 * 'position' is optional, by default it inserts 'tensor' to the back of 'input_sequence'.
 * 
 * Constraint T:
 *   Constrain to any tensor type.
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * 
 * Constraint S:
 *   Constrain to any tensor type.
 *   Allowed Types: seq_tensor_bool, seq_tensor_complex128,
 *                  seq_tensor_complex64, seq_tensor_double, seq_tensor_float,
 *                  seq_tensor_float16, seq_tensor_int16, seq_tensor_int32,
 *                  seq_tensor_int64, seq_tensor_int8, seq_tensor_string,
 *                  seq_tensor_uint16, seq_tensor_uint32, seq_tensor_uint64,
 *                  seq_tensor_uint8
 * 
 * Constraint I:
 *   Constrain position to integral tensor. It must be a scalar(tensor of
 *   empty shape).
 *   Allowed Types: tensor_int32, tensor_int64
 * Input S input_sequence:
 *   Input sequence.
 *   Allowed Types: seq_tensor_bool, seq_tensor_complex128,
 *                  seq_tensor_complex64, seq_tensor_double, seq_tensor_float,
 *                  seq_tensor_float16, seq_tensor_int16, seq_tensor_int32,
 *                  seq_tensor_int64, seq_tensor_int8, seq_tensor_string,
 *                  seq_tensor_uint16, seq_tensor_uint32, seq_tensor_uint64,
 *                  seq_tensor_uint8
 * 
 * Input T tensor:
 *   Input tensor to be inserted into the input sequence.
 *   Allowed Types: tensor_bool, tensor_complex128, tensor_complex64,
 *                  tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_string,
 *                  tensor_uint16, tensor_uint32, tensor_uint64, tensor_uint8
 * 
 * Input I position:
 *   Position in the sequence where the new tensor is inserted. It is optional
 *   and default is to insert to the back of the sequence. Negative value means
 *   counting positions from the back. Accepted range in `[-n, n]`, where `n`
 *   is the number of tensors in 'input_sequence'. It is an error if any of the
 *   index values are out of bounds. It must be a scalar(tensor of empty
 *   shape).
 *   Allowed Types: tensor_int32, tensor_int64
 * Output S output_sequence:
 *   Output sequence that contains the inserted tensor at given position.
 *   Allowed Types: seq_tensor_bool, seq_tensor_complex128,
 *                  seq_tensor_complex64, seq_tensor_double, seq_tensor_float,
 *                  seq_tensor_float16, seq_tensor_int16, seq_tensor_int32,
 *                  seq_tensor_int64, seq_tensor_int8, seq_tensor_string,
 *                  seq_tensor_uint16, seq_tensor_uint32, seq_tensor_uint64,
 *                  seq_tensor_uint8

*
* @since version 11
*
 * @see io/onnx/onnx/defs/sequence/defs.cc:198
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#SequenceInsert
*/

operator_status
prepare_operator__ai_onnx__sequenceinsert__11(
    Onnx__NodeProto *ctx
);

extern operator_info info_operator__ai_onnx__sequenceinsert__11;

typedef struct {
// no attributes
} context_operator__ai_onnx__sequenceinsert__11;

operator_status
execute_operator__ai_onnx__sequenceinsert__11(
    Onnx__NodeProto *ctx
);

# endif