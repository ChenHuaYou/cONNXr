//this file was generated by ../../../../../../scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__POW__12_H
# define OPERATOR_OPERATOR__AI_ONNX__POW__12_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Pow' version 12
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Pow takes input data (Tensor<T>) and exponent Tensor, and
 * produces one output data (Tensor<T>) where the function `f(x) = x^exponent`,
 * is applied to the data tensor elementwise.
 * This operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check [the doc](Broadcasting.md).
 * 
 * Constraint T:
 *   Constrain input X and output types to float/int tensors.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16, tensor_int32,
 *                  tensor_int64
 * 
 * Constraint T1:
 *   Constrain input Y types to float/int tensors.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_uint16,
 *                  tensor_uint32, tensor_uint64, tensor_uint8
 * Input T X:
 *   First operand, base of the exponent.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16, tensor_int32,
 *                  tensor_int64
 * 
 * Input T1 Y:
 *   Second operand, power of the exponent.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16, tensor_int16,
 *                  tensor_int32, tensor_int64, tensor_int8, tensor_uint16,
 *                  tensor_uint32, tensor_uint64, tensor_uint8
 * Output T Z:
 *   Output tensor (same size as X)
 *   Allowed Types: tensor_double, tensor_float, tensor_float16, tensor_int32,
 *                  tensor_int64

*
* @since version 12
*
 * @see io/onnx/onnx/defs/math/defs.cc:588
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Pow
*/

operator_status
prepare_operator__ai_onnx__pow__12(
    Onnx__NodeProto *ctx
);

extern operator_info info_operator__ai_onnx__pow__12;

typedef struct {
// no attributes
} context_operator__ai_onnx__pow__12;

operator_status
execute_operator__ai_onnx__pow__12(
    Onnx__NodeProto *ctx
);

# endif