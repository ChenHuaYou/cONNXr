//this file was generated by ../../../../../../scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__REDUCEMIN__12_H
# define OPERATOR_OPERATOR__AI_ONNX__REDUCEMIN__12_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'ReduceMin' version 12
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Computes the min of the input tensor's element along the provided axes. The resulted
 * tensor has the same rank as the input if keepdims equal 1. If keepdims equal 0, then
 * the resulted tensor have the reduced dimension pruned.
 * 
 * The above behavior is similar to numpy, with the exception that numpy default keepdims to
 * False instead of True.
 * 
 * Constraint T:
 *   Constrain input and output types to high-precision and 8 bit numeric
 *   tensors.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16, tensor_int32,
 *                  tensor_int64, tensor_int8, tensor_uint32, tensor_uint64,
 *                  tensor_uint8
 * Input T data:
 *   An input tensor.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16, tensor_int32,
 *                  tensor_int64, tensor_int8, tensor_uint32, tensor_uint64,
 *                  tensor_uint8
 * Output T reduced:
 *   Reduced output tensor.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16, tensor_int32,
 *                  tensor_int64, tensor_int8, tensor_uint32, tensor_uint64,
 *                  tensor_uint8
 * Attribute INTS axes (optional):
 *   A list of integers, along which to reduce. The default is to reduce over
 *   all the dimensions of the input tensor. Accepted range is [-r, r-1] where
 *   r = rank(data).
 * 
 * Attribute INT keepdims (optional):
 *   Keep the reduced dimension or not, default 1 mean keep reduced dimension.
*
* @since version 12
*
 * @see io/onnx/onnx/defs/reduction/defs.cc:110
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#ReduceMin
*/

operator_status
prepare_operator__ai_onnx__reducemin__12(
    Onnx__NodeProto *ctx
);

extern operator_info info_operator__ai_onnx__reducemin__12;

typedef struct {
    size_t n_axes;
    int64_t* axes;
    int64_t keepdims;

} context_operator__ai_onnx__reducemin__12;

operator_status
execute_operator__ai_onnx__reducemin__12(
    Onnx__NodeProto *ctx
);

# endif