//this file was generated by ../../../../../../scripts/onnx_generator/OperatorHeader.py
# ifndef OPERATOR_OPERATOR__AI_ONNX__ELU__1_H
# define OPERATOR_OPERATOR__AI_ONNX__ELU__1_H

# include "operators/operator.h"
# include "operators/operator_stub.h"
# include "operators/operator_info.h"

/**
 * ai.onnx operator 'Elu' version 1
 *
 * @param[in]  ctx  Operator context
 * @return          Status code
 *
 * Elu takes one input data (Tensor<T>) and produces one output data
 * (Tensor<T>) where the function `f(x) = alpha * (exp(x) - 1.) for x <
 * 0`, `f(x) = x for x >= 0`., is applied to the tensor elementwise.
 * 
 * Constraint T:
 *   Constrain input and output types to float tensors.
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Input T X:
 *   1D input tensor
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Output T Y:
 *   1D input tensor
 *   Allowed Types: tensor_double, tensor_float, tensor_float16
 * Attribute FLOAT alpha (optional):
 *   Coefficient of ELU default to 1.0.
 * 
 * Attribute INTS consumed_inputs (optional):
 *   legacy optimization attribute.
*
* @since version 1
*
 * @see io/onnx/onnx/defs/math/old.cc:570
 * @see https://github.com/onnx/onnx/blob/master/docs/Operators.md#Elu
*/

operator_status
prepare_operator__ai_onnx__elu__1(
    Onnx__NodeProto *ctx
);

extern operator_info info_operator__ai_onnx__elu__1;

typedef struct {
    float alpha;
    size_t n_consumed_inputs;
    int64_t* consumed_inputs;

} context_operator__ai_onnx__elu__1;

operator_status
execute_operator__ai_onnx__elu__1(
    Onnx__NodeProto *ctx
);

# endif